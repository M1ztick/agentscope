"""
OpenAI ReAct Agent Example using AgentScope.

This example demonstrates:
- Using OpenAI's GPT models with streaming
- Basic Python and shell command execution tools
- Interactive conversation using ReActAgent
- Proper tool initialization and management
"""

import os
import asyncio
import openai
from dotenv import load_dotenv

from agentscope.agent import ReActAgent, UserAgent
from agentscope.model import OpenAIChatModel
from agentscope.formatter import OpenAIChatFormatter
from agentscope.memory import InMemoryMemory
from agentscope.tool import (
    Toolkit,
    execute_python_code,
    execute_shell_command,
)

# Load environment variables from .env file
load_dotenv()

async def main() -> None:
    """Main entry point for the OpenAI ReAct agent example."""
    # Create toolkit and register basic tools
    toolkit = Toolkit()
    toolkit.register_tool_function(execute_python_code)
    toolkit.register_tool_function(execute_shell_command)

    # Initialize the OpenAI model with stable settings
    model = OpenAIChatModel(
        model_name="gpt-4",
        api_key=os.getenv("OPENAI_API_KEY"),
        stream=True,
        generate_kwargs={
            "temperature": 0.5,  # Lower temperature for more deterministic outputs
            "max_tokens": 800,   # Conservative token limit
            "top_p": 0.9,       # Reduce randomness while keeping some flexibility
        }
    )

    # System prompt for the agent
    sys_prompt = """You are a helpful AI assistant working in VS Code. You can help users by:
1. Running Python code for data analysis, computation, or scripting
2. Executing shell commands for system operations and file management
3. Assisting with coding tasks and problem-solving

Guidelines:
- Think step by step before taking actions
- Use tools appropriately for each task
- Validate inputs and handle errors carefully
- Be clear and concise in your responses
- If you need to execute code or commands, use the provided tools

Remember: You're operating in a VS Code environment and can help with development tasks."""

    # Initialize the ReAct agent
    agent = ReActAgent(
        name="Assistant",
        sys_prompt=sys_prompt,
        model=model,
        formatter=OpenAIChatFormatter(),
        toolkit=toolkit,
        memory=InMemoryMemory(),
        enable_meta_tool=True,  # Allows agent to manage its tools
        parallel_tool_calls=True,  # Enable parallel tool execution
    )

    # Initialize user agent
    user = UserAgent(name="User")

    # Interactive loop
    print("OpenAI ReAct Agent initialized. Type 'exit' to quit.")
    msg = None
    while True:
        try:
            # Get user input and handle through user agent
            msg = await user(msg)
            text_content = msg.get_text_content()
            if text_content and text_content.lower() == "exit":
                break

            # Let the assistant process and respond
            msg = await agent(msg)
            
        except openai.InternalServerError as e:
            print("\nOpenAI API error occurred. Attempting to recover...\n")
            msg = await user.reply("I apologize, but I encountered a temporary error. Could you please rephrase your last message or ask a different question?")
            continue
            
        except Exception as e:
            print(f"\nAn error occurred: {str(e)}\n")
            msg = await user.reply("I apologize, but something went wrong. Could you please try again?")
            continue

if __name__ == "__main__":
    asyncio.run(main())
