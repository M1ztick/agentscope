
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius one-third of circle B, rolls around circle B without sliding, it will complete 4 full revolutions by the time it returns to its starting point.

    To understand this, let's consider the following:

    1. The circumference of a circle is given by \( C = 2\pi r \), where \( r \) is the radius of the circle.
    2. If the radius of circle B is \( R \), then the radius of circle A is \( \frac{R}{3} \).
    3. The circumference of circle B is \( 2\pi R \), and the circumference of circle A is \( 2\pi \left(\frac{R}{3}\right) = \frac{2\pi R}{3} \).
    4. When circle A rolls around the outside of circle B, it has to travel a distance equal to the circumference of the path it follows, which is the circumference of a circle with radius \( R + \frac{R}{3} = \frac{4R}{3} \). This larger circle's circumference is \( 2\pi \left(\frac{4R}{3}\right) = \frac{8\pi R}{3} \).

    The number of times circle A will revolve is the distance it travels divided by its own circumference. So we can calculate the number of revolutions as:

    \[ \text{Number of Revolutions} = \frac{\text{Circumference of the path}}{\text{Circumference of circle A}} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4 \]

    Therefore, circle A will make 4 full revolutions as it rolls around circle B once.
    Bob: As the negative side, I would like to present a different perspective on the problem. While the calculation of the distance that circle A travels around circle B is correct, we must also account for the fact that as circle A rolls without sliding, it will rotate an additional time due to the rotation around its own center.

    Let's break down the motion of circle A:

    1. As Alice correctly pointed out, the path that circle A follows has a circumference of \( \frac{8\pi R}{3} \).
    2. The number of times circle A will revolve just by traveling this distance is indeed 4, as she calculated.
    3. However, we must also consider that circle A, while rolling along the path, rotates about its own center. For every full trip around the larger circle (circle B plus the radius of circle A), circle A makes one additional revolution about its own center.

    Thus, in addition to the 4 revolutions due to the path length, there is 1 extra revolution because circle A has also turned 360 degrees around its own center once it completes the circuit around circle B.

    Therefore, the total number of revolutions that circle A will make is 4 (from the path) + 1 (from its own rotation) = 5 revolutions.
    Aggregator: The debate has concluded and both sides have provided their arguments. Alice's argument is that circle A will make 4 full revolutions, based on the path length it travels around circle B. Bob, on the other hand, adds an additional revolution to account for the rotation of circle A around its own center as it rolls around circle B.

    Upon reviewing the arguments, Bob's perspective is correct. When a smaller circle rolls without slipping around a larger one, it does indeed make an extra revolution due to its own rotational motion. This is because as circle A goes around circle B, not only does it cover the distance of the larger circle's circumference, but it also completes a full 360-degree turn about its own center. Therefore, the total number of revolutions is 4 (from the path) + 1 (from its own rotation) = 5 revolutions.

    The correct answer to the question is that circle A will revolve 5 times in total.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 53.599 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
