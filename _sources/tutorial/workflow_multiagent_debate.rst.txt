
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present my argument for the number of times circle A revolves around circle B when it rolls around it one trip back to its starting point.

    Given that circle A has a radius that is 1/3 the radius of circle B, we can denote the radius of circle A as \( r \) and the radius of circle B as \( 3r \). When circle A rolls around the outside of circle B without sliding, it follows a path with a circumference equal to the circumference of a circle with a radius of \( 3r + r = 4r \).

    The distance circle A travels in one complete trip around circle B is the circumference of this larger circle, which is:
    \[ 2\pi(4r) = 8\pi r \]

    Since the circumference of circle A itself is:
    \[ 2\pi r \]

    We can determine the number of revolutions by dividing the total distance traveled by the circumference of circle A:
    \[ \frac{8\pi r}{2\pi r} = 4 \]

    However, this calculation only accounts for the fact that circle A has to travel the distance of the outer path. We must also consider the additional revolution that occurs due to the rolling motion. Since circle A is rolling without sliding, it completes an extra revolution on top of the 4 calculated from the path length. This is because, after traveling the full distance, circle A ends up in the same orientation as it started, having completed one additional turn.

    Therefore, the total number of revolutions circle A makes is:
    \[ 4 + 1 = 5 \]

    In conclusion, circle A will revolve 5 times in total as it rolls around circle B one trip back to its starting point.
    Alice: To summarize, circle A, with a radius 1/3 that of circle B, will revolve 5 times in total when it rolls around the outside of circle B without sliding and returns to its starting point. The 5 revolutions consist of 4 revolutions due to the path length and 1 additional revolution due to the rolling motion.
    Bob: While I appreciate the reasoning provided, I must disagree with the conclusion that circle A will complete 5 revolutions in total. The correct number of revolutions is actually 4.

    Let's analyze this step by step:

    1. **Path Length and Revolutions**: When a smaller circle rolls around the outside of a larger one without sliding, it covers a distance equal to the circumference of the path it takes. In this case, the path is the circumference of a circle with a radius equal to the sum of the radii of circles A and B (r_A + r_B). Since the radius of circle A (r_A) is 1/3 the radius of circle B (r_B), we can say r_A = r_B / 3, and therefore, r_A + r_B = r_B / 3 + r_B = 4r_B / 3. The circumference of the path is then 2 * pi * (4r_B / 3).

    2. **Revolutions Based on Path Circumference**: The number of times circle A will revolve based on the length of the path is the path's circumference divided by the circumference of circle A. The circumference of circle A is 2 * pi * r_A. Substituting r_A with r_B / 3, we get 2 * pi * (r_B / 3). Dividing the path's circumference by the circumference of circle A gives us (2 * pi * (4r_B / 3)) / (2 * pi * (r_B / 3)) = 4. This means circle A will make 4 revolutions due to the path length.

    3. **Additional Revolution Due to Rolling**: It is a common misconception that there should be an additional revolution because the point of contact changes as the circle rolls. However, this extra revolution is already accounted for in the calculation of the 4 revolutions, as the rolling motion is part of the path that circle A travels.

    In summary, when circle A rolls around circle B, it completes exactly 4 revolutions, not 5, since the 4 revolutions include both the travel along the path and the inherent rotation due to rolling.
    Aggregator: The debate has concluded, and the correct number of revolutions that circle A will make as it rolls around the outside of circle B is 4. Here's the reasoning:

    - The radius of circle A (r_A) is 1/3 the radius of circle B (r_B), so r_A = r_B / 3.
    - The path that circle A takes is the circumference of a circle with a radius equal to the sum of the radii of circles A and B, which is r_A + r_B = 4r_B / 3.
    - The number of revolutions circle A makes is the total path length (circumference of the path) divided by the circumference of circle A itself.

    The circumference of the path is 2 * pi * (4r_B / 3), and the circumference of circle A is 2 * pi * (r_B / 3). Dividing the two gives us exactly 4, which means circle A revolves 4 times in total when rolling around circle B without sliding.

    Bob's argument correctly identifies that there is no additional revolution on top of the 4 calculated from the path length. The rolling motion is already included in the 4 revolutions, as each point on the circumference of circle A touches the path once per revolution.

    Therefore, Bob's answer is correct, and circle A will revolve 4 times in total.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 25.818 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
