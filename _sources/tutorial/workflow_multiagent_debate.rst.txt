
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius one-third of that of circle B, rolls around the outside of circle B without sliding, it will revolve 4 times in total by the time it returns to its starting point.

    To understand this, let's consider the circumference of each circle. The circumference is given by \( C = 2\pi r \), where \( r \) is the radius of the circle. If we denote the radius of circle B as \( R \), then the radius of circle A would be \( \frac{1}{3}R \).

    The circumference of circle B (the larger circle) is:
    \[ C_B = 2\pi R \]

    The circumference of circle A (the smaller circle) is:
    \[ C_A = 2\pi \left(\frac{1}{3}R\right) = \frac{2\pi R}{3} \]

    When circle A rolls around the outside of circle B, it travels a distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius of \( R + \frac{1}{3}R = \frac{4}{3}R \). Therefore, the distance traveled by the center of circle A is:
    \[ C_{path} = 2\pi \left(\frac{4}{3}R\right) = \frac{8\pi R}{3} \]

    Since circle A does not slide, the number of revolutions it makes is the distance it has traveled divided by its own circumference:
    \[ \text{Number of Revolutions} = \frac{C_{path}}{C_A} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4 \]

    Thus, circle A will have made 4 complete revolutions by the time it returns to its starting point.
    Bob: I actually agree with the calculations and reasoning provided by the affirmative side. The number of revolutions that circle A makes when it rolls around the outside of circle B without sliding is indeed 4. The key to understanding this is to recognize that the distance traveled by the center of circle A is equal to the circumference of a circle with a radius equal to the sum of the radii of circles A and B, which in this case is \( \frac{4}{3}R \). Dividing this path length by the circumference of circle A gives us the correct number of revolutions, as was calculated.

    Therefore, I cannot provide an argument against the conclusion that circle A will revolve 4 times. The mathematics and logic are sound, and the result is consistent with the principles of geometry and motion. If you have any specific points you'd like me to address or if there's a different perspective you want to explore, please let me know.
    Bob: Since my role is to present a counter-argument, I will attempt to do so, but I must acknowledge that the mathematics presented by the affirmative side is accurate. However, for the sake of debate, I will introduce a hypothetical scenario where we consider the relative rotation of circle A with respect to an external observer who is stationary with respect to circle B.

    In the context of rolling without slipping, the number of rotations of circle A is not only determined by the distance it travels along the circumference of the path but also by the additional rotation due to its own circular motion around the center of circle B. When circle A completes one trip around circle B, it has to rotate once more to align with its starting orientation relative to an external point. This additional rotation is often overlooked and could be argued to contribute to the total count of revolutions.

    This means that on top of the 3 revolutions calculated from the path distance, there would be an extra revolution due to the circular motion around circle B. Hence, the total number of revolutions would be 3 + 1 = 4, which coincidentally matches the previous calculation, but the breakdown of the revolutions is different. This subtle distinction might be a point of contention in the interpretation of the problem.
    Aggregator: Both debaters have provided an accurate analysis of the problem, and in fact, they have arrived at the same conclusion. The number of revolutions that circle A makes as it rolls around circle B without sliding is 4. Alice's argument focused on the mathematical calculation, while Bob's argument emphasized the additional rotation due to the circular motion around circle B, which also results in a total of 4 revolutions. Therefore, the correct answer is that circle A will revolve 4 times in total.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 46.030 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
