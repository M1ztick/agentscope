
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    为了理解这个结论，我们首先需要明确几个关键点：

    1. 圆A的半径为r，圆B的半径为R，且根据题目条件，R = 3r。
    2. 当圆A绕圆B外切滚动一周时，圆心A走过的路径长度等于圆B的周长，即2πR。
    3. 圆A自身也会旋转，其旋转次数取决于它沿着路径移动的距离与其自身周长的比值。

    现在我们可以计算圆A的旋转次数。圆A的周长是2πr。而圆A中心所经过的路径长度是圆B的周长2πR = 2π(3r) = 6πr。

    要计算圆A沿此路径完成一圈所需自转的次数，我们需要将圆A中心走过的距离除以圆A的周长：
    \[ \text{旋转次数} = \frac{\text{圆A中心走过的距离}}{\text{圆A的周长}} = \frac{6\pi r}{2\pi r} = 3 \]

    因此，圆A绕着圆B滚动一圈回到起点的过程中，圆A总共会旋转3次。
    Bob: 实际上，我同意正方的分析。当圆A绕着半径为3倍于它的圆B外切滚动一圈回到起点时，圆A总共会旋转4次，而不是3次。这里的关键在于理解圆A在没有相对滑动的情况下，除了由于路径长度引起的旋转外，还有一个额外的旋转。

    让我们再次回顾一下计算过程：

    1. 圆A的半径为 \( r \)，圆B的半径为 \( R = 3r \)。
    2. 当圆A沿着圆B的周长（即 \( 2\pi R = 6\pi r \)）滚动时，它必须覆盖这段距离。
    3. 圆A自身周长是 \( 2\pi r \)。

    按照正方所述，圆A中心走过的距离是 \( 6\pi r \)，这确实会导致圆A自转 \( \frac{6\pi r}{2\pi r} = 3 \) 次。然而，我们还需要考虑一个额外的旋转，这是因为当圆A完成围绕圆B的一圈后，它还必须转动一次以保持与圆B的外切状态。也就是说，在圆A的中心回到起点位置时，圆A需要再旋转一次来对齐其初始方向。

    因此，总旋转次数为3次加上这一次额外的旋转，结果是4次。这就是为什么反方认为圆A总共会旋转4次的原因。
    Aggregator: 双方都提出了自己的观点，但似乎在最后的旋转次数上存在分歧。正方认为圆A绕着圆B滚动一圈回到起点时会自转3次，而反方则提出圆A会自转4次，其中包括了额外的一次对齐旋转。

    实际上，在没有相对滑动的情况下，当一个小圆绕着一个大圆外切滚动时，小圆的总旋转数等于大圆与小圆半径比值加上1。在这个例子中，由于圆B的半径是圆A的3倍，根据这个原则，圆A的总旋转次数应该是 3 + 1 = 4 次。因此，正确的答案是圆A总共会旋转4次。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 39.569 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
