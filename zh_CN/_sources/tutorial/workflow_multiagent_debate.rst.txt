
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是这样的：当圆A绕着圆B外切滚动一圈回到起点时，它会旋转4次。

    理由如下：设圆B的半径为R，则圆A的半径为r = R/3。我们知道，如果一个圆沿着一条直线滚动而不滑动，那么它滚动的距离等于圆周长。同样地，当圆A绕着圆B外切滚动而没有相对滑动时，它沿圆B的外围走过的弧长应该等于圆A自身周长乘以它的旋转次数。

    圆B的周长为2πR，圆A的周长为2πr = 2π(R/3) = (2/3)πR。由于圆A要绕圆B一周，它走过的总距离就是圆B的周长2πR。因此，我们可以设置等式来计算圆A旋转的次数n：

    \[ n \times 2\pi r = 2\pi R \]

    将r替换为R/3，得到：

    \[ n \times 2\pi (R/3) = 2\pi R \]

    简化后得到：

    \[ n \times (R/3) = R \]

    从而解得：

    \[ n = 3 \]

    但这里我们忽略了一个事实，即当圆A完成绕圆B一周的时候，它不仅围绕圆B公转了一圈，还因为两圆相切点的变化而自转了一圈。所以除了绕圆B旋转3圈外，圆A还会额外自转1圈。因此，总的旋转次数为3+1=4次。这就是正方的观点。
    Bob: 反方观点如下：当圆A绕着圆B外切滚动一圈回到起点时，它会旋转3次而不是4次。

    首先，让我们回顾一下正方的计算过程。正方提到，圆A绕圆B一周的距离等于圆B的周长2πR，而圆A的周长是2πr = (2/3)πR。因此，圆A在绕圆B一周的过程中所经历的总弧长与圆A自转圈数的关系可以用以下等式来表示：

    \[ n \times 2\pi r = 2\pi R \]

    解这个等式我们得到 \( n = 3 \)，这表明圆A围绕圆B公转了3圈。这里的关键在于理解“额外自转一圈”的概念。实际上，这个额外的一圈已经在\( n = 3 \)中被考虑到了。当圆A沿着圆B的边缘滚动时，它的中心也在绕着一个半径为 \( R + r = R + R/3 = 4R/3 \) 的更大的圆移动。圆A每完成一次这样的运动，它不仅绕着圆B走了一圈，而且由于两圆相切点的变化，圆A本身也完成了相当于自身周长的旋转。

    重要的是，这种情况下并不需要再单独加上一圈。当我们说圆A绕圆B一周时，已经隐含了圆A跟随其接触点做了一次完整的自转。所以，圆A总共的旋转次数就是它绕圆B公转的次数，即3次。额外的那“一圈”实际上是圆A绕着圆B公转时自然发生的，并不是独立于3次之外的额外旋转。因此，反方认为圆A绕圆B滚动一圈回到起点时，总共会旋转3次。
    Aggregator: 双方辩论者已经提出了他们的观点。Alice认为圆A会旋转4次，她考虑了圆A绕圆B一周时的公转加上一次额外的自转。而Bob则认为圆A总共会旋转3次，他指出在计算公转次数时已经包含了由于两圆相切点变化带来的自转。

    实际上，当一个圆沿着另一个圆的外侧滚动而不滑动时，它不仅会绕着中心圆公转，还会因为相切点的变化而自转。在这个特定情况下，圆A的半径是圆B的1/3，因此圆A绕圆B一周时，它既完成了3次自身的周长旋转（即3圈），又因为跟随接触点做了一次完整的自转。

    但是，关键在于这个额外的自转已经在计算公转次数时被考虑进去了。所以，我们不需要再为这个额外的自转加一圈。正确的答案是：**圆A总共会旋转3次**。

    辩论结束，正确答案是： 3




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 2.009 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
