
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-06 02:59:19.540_0e997c', created_at='2025-09-06 02:59:19.540', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-06 02:59:21.582_463d7b', created_at='2025-09-06 02:59:21.583', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=2.041504, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='HgCqAnwgEaHr7MvFxcnVVs', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-06 02:59:21.583', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-06 02:59:22.472_43760f', created_at='2025-09-06 02:59:22.472', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.888214, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-06 02:59:22.536_e63731', created_at='2025-09-06 02:59:22.536', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=0.9519, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-06 02:59:22.600_2315b4', created_at='2025-09-06 02:59:22.600', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.016258, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-06 02:59:22.664_8656a3', created_at='2025-09-06 02:59:22.664', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.079529, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-06 02:59:22.787_652e43', created_at='2025-09-06 02:59:22.787', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.202778, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-06 02:59:22.924_99fd32', created_at='2025-09-06 02:59:22.924', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.340263, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-06 02:59:24.332_278594', created_at='2025-09-06 02:59:24.332', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.747899, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-06 02:59:24.872_bbdc69', created_at='2025-09-06 02:59:24.872', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=3.287476, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-06 02:59:25.026_1cf9aa', created_at='2025-09-06 02:59:25.026', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=3.441791, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-06 02:59:25.340_cde70d', created_at='2025-09-06 02:59:25.340', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.755883, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-06 02:59:25.470_dee2d6', created_at='2025-09-06 02:59:25.470', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.885415, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-06 02:59:25.668_b66e72', created_at='2025-09-06 02:59:25.668', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.083902, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对自我身份感到困惑。也有可能他们是在进行哲学思考，或者只是好奇。\n\n接下来，我要分析这个问题的不同层面。从哲学角度看，这可能涉及存在主义，比如萨特说的“存在先于本质”，强调人的自我定义。心理学上，可能涉及自我认同的发展，比如埃里克森的理论，人生不同阶段的自我探索。\n\n然后，用户可能没有明确表达他们的背景，所以需要考虑不同的可能性。他们可能是学生，正在学习哲学或心理学；或者普通用户，只是突然对自我产生疑问。也有可能他们处于情绪低落期，需要情感支持。\n\n还要注意文化差异。不同文化对自我概念的理解不同，比如西方强调个体独立，东方可能更注重社会关系。但用户用中文提问，可能更倾向于东方视角，但不确定，所以回答时要保持中立。\n\n另外，用户可能希望得到具体的建议，比如如何探索自我，或者推荐相关书籍。但问题本身比较抽象，可能需要引导他们更具体地描述问题，或者提供不同角度的思考方式。\n\n还要避免给出过于学术化的回答，保持口语化和易懂。同时，要确保回答有帮助，而不是空泛。可能需要结合哲学、心理学和日常生活的例子，让用户更容易理解。\n\n最后，检查是否有遗漏的角度，比如宗教或精神层面的自我认知，但用户没有提到这些，所以可能不需要深入。保持回答全面但不过于冗长，让用户感受到被理解和有收获。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它可能源于对自我身份的探索、对生命意义的思考，或是对内心困惑的追问。以下是一些可能的视角，或许能帮助你更接近答案：\n\n---\n\n### 1. **从哲学角度看**  \n   - **存在主义**（如萨特、海德格尔）认为，“存在先于本质”——你并非被预先定义的“谁”，而是通过选择、行动和责任不断塑造自己。  \n   - **东方哲学**（如佛教、道家）可能更强调“无我”或“破除执念”，认为“我”是流动的、虚幻的，真正的自我可能超越表象。  \n   - **斯多葛学派**则主张：你不是你的思想、情绪或外在身份，而是观察这些的“意识”。\n\n---\n\n### 2. **从心理学角度看**  \n   - **自我认同**（Erikson）：人在不同阶段会不断重新定义自己，比如青少年时期的“我是谁？”可能与成年后的“我想要什么？”不同。  \n   - **内在对话**：你可能在问：“我的价值观是什么？”“我的核心信念是什么？”“我如何与他人建立联系？”  \n   - **创伤与重构**：如果问题源于痛苦（如失去、失败），或许需要重新审视“我”是否被过去的经历定义。\n\n---\n\n### 3. **从日常经验看**  \n   - **角色与身份**：你可能是某人的孩子、朋友、同事，或某个社会角色（如学生、艺术家）。但这些只是外在标签，而非本质。  \n   - **感受与行动**：你的“存在”或许体现在你如何感受世界、如何选择行动，比如“我是一个愿意帮助他人的人”或“我渴望自由”。  \n   - **未完成的答案**：有时问题本身比答案更重要——它可能暗示你正在寻找某种意义或方向。\n\n---\n\n### 4. **可能的追问方向**  \n   - **你为何突然问这个问题？** 是因为某个事件、情绪波动，还是对生活感到迷茫？  \n   - **你希望“我是谁”指向什么？** 是更清晰的自我认知？还是对生命意义的探索？  \n   - **你是否愿意尝试用不同方式描述自己？** 比如“我是一个喜欢观察星空的人”“我是一个在困难中依然尝试前行的人”。\n\n---\n\n### 5. **一句可能的启发**  \n   - **“你不需要成为谁，只需活出你此刻的真相。”**  \n   - 或者，像诗人里尔克所说：“你必须活在你的问题中，就像活在你的生活中一样——你将逐渐发现，问题会慢慢消失。”\n\n---\n\n最终，“我是谁”没有标准答案，它可能是一场持续的旅程。你可以试着写下：  \n- **我是什么？**（身体、能力、兴趣）  \n- **我不是什么？**（恐惧、社会期待、他人定义）  \n- **我希望成为什么？**（理想中的自己）  \n\n也许答案就藏在这些追问中。你愿意和我分享更多吗？'}], id='2025-09-06 02:59:41.586_98268e', created_at='2025-09-06 02:59:41.586', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1010, time=15.913521, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.051 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
