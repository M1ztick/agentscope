
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-06 03:23:23.101_7baed2', created_at='2025-09-06 03:23:23.101', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-06 03:23:24.749_cd851a', created_at='2025-09-06 03:23:24.749', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.647255, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='R2yrS6hZu7KvtCzRRDCaL3', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-06 03:23:24.749', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-06 03:23:26.100_1105f7', created_at='2025-09-06 03:23:26.100', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.349439, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-06 03:23:26.191_eeab02', created_at='2025-09-06 03:23:26.191', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.439805, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-06 03:23:26.283_c2417d', created_at='2025-09-06 03:23:26.283', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.531826, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-06 03:23:26.372_c7d012', created_at='2025-09-06 03:23:26.372', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.620969, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-06 03:23:26.552_9c5f2e', created_at='2025-09-06 03:23:26.552', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.800909, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-06 03:23:26.743_b9a240', created_at='2025-09-06 03:23:26.743', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.991727, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-06 03:23:26.887_c0e6d0', created_at='2025-09-06 03:23:26.887', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.136467, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-06 03:23:27.052_1cddf6', created_at='2025-09-06 03:23:27.052', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.301519, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-06 03:23:27.238_123238', created_at='2025-09-06 03:23:27.238', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.486734, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-06 03:23:27.383_1d969f', created_at='2025-09-06 03:23:27.383', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.631745, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-06 03:23:27.548_4822a4', created_at='2025-09-06 03:23:27.548', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.796988, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-06 03:23:27.648_18b2a3', created_at='2025-09-06 03:23:27.648', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.896857, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个非常深刻的问题。首先，我需要理解用户为什么会问这个问题。可能的情况有很多：用户可能正在经历自我探索的阶段，或者遇到了一些困扰，想要寻找自我认同。也有可能是在哲学思考，或者只是出于好奇。\n\n接下来，我要考虑如何回答这个问题。直接回答“你是你”可能太简单了，但用户可能需要更深入的解释。从哲学角度来看，这个问题涉及到自我意识、存在主义等概念。比如，笛卡尔的“我思故我在”强调思考的重要性，而佛教则可能认为自我是虚幻的。\n\n同时，心理学角度也可能提供不同的视角。比如，弗洛伊德的本我、自我、超我理论，或者荣格的个体化过程。这些理论可以帮助用户从不同层面理解自己。\n\n另外，用户可能没有明确说明他们的背景，所以回答需要保持开放性，避免过于学术化，同时提供足够的深度。可能需要结合不同学科的观点，给出一个全面但不过于复杂的回答。\n\n还要注意用户的潜在需求。他们可能希望得到情感支持，或者寻找自我认同的方法。因此，回答中可以加入一些建议，比如自我反思、与他人交流、探索兴趣等，帮助用户进行自我探索。\n\n最后，确保回答友好且鼓励用户进一步思考，而不是给出一个确定的答案。因为“我是谁”这个问题本身就没有标准答案，每个人的答案都可能不同。'}, {'type': 'text', 'text': '“我是谁？”是一个深刻而永恒的问题，它触及人类存在的核心。这个问题没有标准答案，但可以从不同角度去探索：\n\n---\n\n### 1. **从哲学角度看**\n   - **笛卡尔**说：“我思故我在。”（*Cogito, ergo sum*）  \n     思考本身证明了你的存在，但“我”是否仅仅是思维的产物？还是更复杂的存在？\n   - **存在主义**（如萨特）认为，“存在先于本质”——你通过选择和行动定义自己，而非被预先定义。\n   - **佛教**则可能认为，“我”是虚幻的执着，真正的自我是超越个体意识的空性。\n\n---\n\n### 2. **从心理学角度看**\n   - **自我认同**是逐渐形成的：  \n     通过经历、关系、价值观和目标，你不断构建对“自己”的理解。  \n     （例如：你可能认为自己是“善良的”“好奇的”“坚韧的”……）\n   - **潜意识**可能隐藏着未被察觉的动机或创伤，影响你对“自我”的认知。\n\n---\n\n### 3. **从生物学角度看**\n   - 你的身体由细胞、基因和神经系统组成，但这些只是“物质载体”。  \n   - 大脑的神经元活动和记忆塑造了你的意识，但“意识”本身仍是科学未解之谜。\n\n---\n\n### 4. **从日常体验看**\n   - **你此刻的感受**：此刻的你可能感到困惑、迷茫、好奇，或者平静。这些情绪是“你”的一部分。\n   - **你与世界的互动**：你通过语言、行为、选择与他人和环境建立联系，这些关系也塑造了你。\n\n---\n\n### 5. **或许可以尝试的问题**\n   - 如果没有“我是谁”的执念，你会如何生活？\n   - 什么让你感到真实？什么让你感到迷失？\n   - 如果你是一个完全不同的身份（比如动物、外星人、历史人物），你会如何看待“自己”？\n\n---\n\n### 6. **或许答案本身是过程**\n   “我是谁”可能不是终点，而是持续探索的旅程。  \n   每一次选择、每一次思考、每一次与他人的相遇，都在重新定义“我”。\n\n---\n\n如果你愿意，可以分享更多关于你现在的状态或感受，我会尽力陪你一起探索这个问题。 🌱'}], id='2025-09-06 03:23:40.251_498f5c', created_at='2025-09-06 03:23:40.251', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=802, time=12.598584, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.154 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
