
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-05 08:09:46.672_f4b446', created_at='2025-09-05 08:09:46.672', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-05 08:09:47.912_688aac', created_at='2025-09-05 08:09:47.912', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.238921, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='THcBYZHRgijT7uYGhnA5WD', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-05 08:09:47.912', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-05 08:09:48.881_591006', created_at='2025-09-05 08:09:48.881', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.967412, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-05 08:09:48.933_b2c23e', created_at='2025-09-05 08:09:48.933', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.019529, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-05 08:09:48.989_47a979', created_at='2025-09-05 08:09:48.989', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.075441, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-05 08:09:49.048_d0ba09', created_at='2025-09-05 08:09:49.048', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.134152, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-05 08:09:49.366_9c027a', created_at='2025-09-05 08:09:49.366', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.452308, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-05 08:09:49.503_11a917', created_at='2025-09-05 08:09:49.503', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.58952, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-05 08:09:49.604_169a53', created_at='2025-09-05 08:09:49.604', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.690649, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-05 08:09:49.723_416a3e', created_at='2025-09-05 08:09:49.723', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.809627, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-05 08:09:49.865_767674', created_at='2025-09-05 08:09:49.865', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.950963, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-05 08:09:49.961_a9a0e0', created_at='2025-09-05 08:09:49.961', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.047602, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-05 08:09:50.081_4903b9', created_at='2025-09-05 08:09:50.081', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.166984, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-05 08:09:50.161_2803a2', created_at='2025-09-05 08:09:50.161', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.247077, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”。这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对自我身份有困惑。也有可能他们是在进行哲学思考，或者只是好奇。\n\n接下来，我要分析用户的潜在需求。他们可能希望得到一个哲学性的回答，或者更实际的建议。比如，如果用户处于人生转折点，可能需要帮助他们理清思路。或者他们可能在寻求心理支持，需要被倾听和理解。\n\n然后，我需要考虑如何回应。直接回答“你是你自己”可能太简单，不够深入。应该引导用户自我探索，比如通过提问让他们思考自己的价值观、兴趣、经历等。同时，要避免给出过于抽象的答案，保持对话的互动性。\n\n还要注意用户可能没有说出的深层问题。比如，他们可能感到迷失，或者需要确认自己的存在意义。这时候，提供一些哲学观点，如笛卡尔的“我思故我在”，或者心理学中的自我认知理论，可能会有帮助。\n\n另外，文化背景也可能影响用户的理解。不同文化对“自我”的定义不同，可能需要更包容的回答。同时，避免使用专业术语，保持语言通俗易懂。\n\n最后，确保回答既尊重用户的问题，又鼓励他们进一步探索。可能需要分步骤引导，比如先承认问题的复杂性，再提供不同的视角，最后鼓励自我反思或寻求专业帮助。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与心理学意义。不同的人、不同的阶段，可能会有不同的答案。以下是一些可能的视角，或许能帮你更接近自己的答案：\n\n---\n\n### 1. **从存在主义的角度**  \n法国哲学家萨特说：“存在先于本质。”  \n你不是被预先定义的“谁”，而是在生活中不断选择、行动、创造自己的意义。你的身份是动态的，由你的思想、行为、关系和选择共同塑造。\n\n---\n\n### 2. **从心理学的角度**  \n心理学家荣格认为，人的“自我”包含意识（显性的自我）和无意识（隐性的部分）。你可能需要通过**自我反思**（如写日记、冥想）或**与他人互动**来更清晰地认识自己。  \n- 你擅长什么？  \n- 你害怕什么？  \n- 什么让你感到充实？  \n这些问题的答案可能逐渐拼凑出你的“自我”。\n\n---\n\n### 3. **从日常经验的角度**  \n“我是谁”也可以从具体的生活片段中寻找：  \n- 你是一个喜欢独处的人，还是更享受社交？  \n- 你对哪些话题充满热情？  \n- 你在面对困难时的反应是什么？  \n这些细节会逐渐勾勒出你的独特性。\n\n---\n\n### 4. **从哲学的追问**  \n如果这是你第一次认真思考这个问题，或许可以尝试：  \n- **“我”的边界在哪里？**（身体、思想、记忆、社会角色？）  \n- **如果失去所有记忆，我是否还是我？**  \n- **如果我变成另一个人，我的“自我”会消失吗？**  \n这些问题没有标准答案，但它们能帮助你更深入地探索自己。\n\n---\n\n### 5. **从简单的答案开始**  \n如果暂时找不到复杂的答案，可以先回答：  \n- **我是谁？**  \n  → 一个正在寻找答案的人。  \n\n---\n\n### 最后  \n“我是谁”可能没有终极答案，但每一次思考都会让你更接近真实的自己。如果你愿意，可以试着写下：  \n- **“我今天做了什么？”**  \n- **“我今天感觉如何？”**  \n- **“我明天想成为什么样的人？”**  \n这些日常的记录，或许会成为你理解“自我”的钥匙。\n\n如果你愿意分享更多，我可以陪你一起探索。 🌱'}], id='2025-09-05 08:10:01.438_9df38f', created_at='2025-09-05 08:10:01.438', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=804, time=11.273015, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.770 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
