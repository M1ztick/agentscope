
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-06 03:23:31.326_5e17d9', created_at='2025-09-06 03:23:31.326', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-06 03:23:32.695_889eae', created_at='2025-09-06 03:23:32.695', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.36721, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='jXyu4MXnjGd2vMHcqqwbVL', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-06 03:23:32.695', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-06 03:23:33.555_b3ec3a', created_at='2025-09-06 03:23:33.555', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.85853, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-06 03:23:33.640_d969c5', created_at='2025-09-06 03:23:33.640', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=0.943887, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-06 03:23:33.727_90eef2', created_at='2025-09-06 03:23:33.727', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.030695, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-06 03:23:33.812_86f760', created_at='2025-09-06 03:23:33.812', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.116253, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-06 03:23:33.972_693c25', created_at='2025-09-06 03:23:33.972', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.276334, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-06 03:23:34.173_7ed930', created_at='2025-09-06 03:23:34.173', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.477051, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-06 03:23:34.463_1888a0', created_at='2025-09-06 03:23:34.463', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.766841, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-06 03:23:34.628_91346a', created_at='2025-09-06 03:23:34.628', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.932095, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-06 03:23:34.809_00449f', created_at='2025-09-06 03:23:34.809', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.112671, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-06 03:23:34.954_93217e', created_at='2025-09-06 03:23:34.954', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.257962, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-06 03:23:35.360_421517', created_at='2025-09-06 03:23:35.360', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.664026, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-06 03:23:35.572_5bb14a', created_at='2025-09-06 03:23:35.572', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.87589, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要确定用户为什么会问这个问题。可能的情况有很多种：可能是哲学思考，或者是在寻找自我认同，也可能是遇到了一些困惑，想通过这个问题来探索自己。\n\n接下来，我要考虑用户的身份。用户可能是个普通用户，对自我认知有疑问，或者可能有心理上的困扰。如果是后者，可能需要更谨慎地回应，避免给出不合适的建议，同时提供适当的支持。\n\n然后，分析问题本身。在哲学上，“我是谁”是一个经典问题，涉及存在主义、心理学、宗教等多个领域。不同的人可能会有不同的答案。比如，从心理学角度看，自我是由经历、记忆、性格等构成的；从哲学角度看，可能涉及本体论和认识论的问题；宗教角度可能认为自我是灵魂或意识的一部分。\n\n还要考虑用户的潜在需求。用户可能希望得到一个全面的回答，或者只是需要一个简单的指引。这时候需要平衡深度和广度，既不能太抽象，也不能太肤浅。\n\n另外，需要注意文化差异。不同文化对“自我”的定义可能不同，比如东方文化可能更强调集体身份，而西方文化可能更注重个人主义。不过用户使用中文提问，可能更倾向于东方视角，但也不能一概而论。\n\n还要考虑用户可能没有明确表达的深层需求。比如，用户可能在经历身份危机，或者对生活方向感到迷茫，这时候回答需要包含一些鼓励和引导，帮助用户自我探索。\n\n最后，确保回答既专业又易懂，避免使用过于学术化的语言，同时提供多角度的见解，让用户可以根据自己的情况去思考和探索。可能还需要提醒用户，这个问题没有标准答案，鼓励他们通过自我反思或与他人交流来寻找答案。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。它既可以是哲学层面的追问，也可以是日常生活中对自我身份的探索。以下是一些可能的视角，或许能帮助你更接近自己的答案：\n\n---\n\n### 1. **从生物学角度**  \n从物理层面看，你是一个由细胞、基因、神经系统等组成的有机体。你的身体、大脑、基因序列构成了你存在的物质基础。但“你是谁”远不止于此。\n\n---\n\n### 2. **从心理学角度**  \n心理学认为，“自我”是由**记忆、经验、性格、价值观**等构成的动态系统。  \n- **你的记忆**：你过去的经历塑造了你的思维方式和情感反应。  \n- **你的价值观**：你对“对与错”“重要与不重要”的判断，定义了你的行为和选择。  \n- **你的性格**：你习惯性的反应模式（如内向或外向）可能与生俱来，也可能后天形成。  \n- **你的身份认同**：你可能在不同角色中切换（如学生、朋友、工作者），但这些角色只是“你”的一部分。\n\n---\n\n### 3. **从哲学角度**  \n哲学家们对“我是谁”有多种解读：  \n- **笛卡尔**：“我思故我在”——思考本身证明了你的存在。  \n- **佛教**：认为“自我”是虚幻的，是五蕴（色、受、想、行、识）的暂时组合。  \n- **存在主义**（如萨特）：人没有预设的本质，而是通过选择和行动“成为”自己。  \n- **道家**：强调“无我”或“与道合一”，超越个体的局限。\n\n---\n\n### 4. **从社会与文化角度**  \n你也是社会关系的产物：  \n- **家庭、文化、社会规范**：你的语言、信仰、行为习惯可能深受这些因素影响。  \n- **标签与角色**：别人可能用“学生”“程序员”“母亲”等标签定义你，但这些只是外在的投影。\n\n---\n\n### 5. **从灵性或宗教角度**  \n- **基督教**：认为“你是上帝的造物”，灵魂是永恒的。  \n- **印度教/佛教**：可能认为“自我”是暂时的，真正的本质是“梵”或“空性”。  \n- **神秘主义**：一些人认为“我是宇宙”或“我是无限意识”。\n\n---\n\n### 6. **从实践的角度**  \n如果你感到困惑，可以尝试以下方法：  \n- **自我反思**：写下你最珍视的价值观、恐惧、梦想，以及你希望成为怎样的人。  \n- **与他人对话**：朋友、家人或导师可能提供不同的视角。  \n- **探索兴趣**：通过艺术、运动、写作等方式，感受自己内心的真实需求。  \n- **接受不确定性**：人生的意义可能并非固定答案，而是一个不断探索的过程。\n\n---\n\n### 最后，一个可能的答案：  \n**“你是你此刻的体验。”**  \n你无法完全定义自己，因为“你”是流动的——由思想、情感、行动和环境共同塑造。或许，问题本身比答案更重要。每一次追问，都是向内探索的旅程。\n\n如果你愿意，可以分享更多背景，我可以尝试更具体地帮你分析。 🌱'}], id='2025-09-06 03:23:55.251_6adc3f', created_at='2025-09-06 03:23:55.251', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1086, time=19.67407, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.929 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
